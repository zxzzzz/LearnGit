基本操作篇：
git跟踪并管理的是修改而不是文件
HEAD指向的版本就是当前版本
/LearnGit文件夹即工作区 .git目录是版本库
1 git diff:查看修改内容

版本回退篇：
2 git log :显示从最近到最远的commit日志
commit commit id
commit备注
3 git reset --hard HEAD^：回退到上一个版本
4 git reset --hard commit id ：回退到指定版本，只是改变Head指针的指向
5 git reflog:记录每一次命令
6 git checkout -- 文件名 ：撤销工作区的修改
7 git reset Head -- 文件名：撤销暂存区的修改
8 git rm 文件名:删除版本库的文件

分支篇
默认采取Fast forward模式，删除分支后丢掉分支信息，看不出曾经做过合并
9 git branch：查看所有分支
10 git checkout 分支名：创建新分支
11 git branch 分支名：切换分支
12 git checkout -b 分支名：创建并切换到新分支
13 git merge dev：合并dev分支到master
14 git branch -d 分支名：删除分支
15 git log --graph：可以看到分支合并图
16 git merge --no-ff -m "merge with no-ff" dev：禁用fast forward模式
############################################################
分支管理原则：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
解决冲突：
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
